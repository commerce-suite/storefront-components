/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IColor, IInputSelectDataEvent, IProductCard, ISelectVariation } from "./components/ui/product-card/product-card.type";
import { EnumBuyTogetherOnLoadStatus, IBuyTogetherComponentData } from "./components/buy-together/buy-together.type";
import { ICashback } from "./components/cashback/cashback.type";
import { IFrontSelectOption } from "./components/ui/front-select/front-select.type";
import { IHighlightCardItem } from "./components/ui/highlight-card/highlight-card.type";
import { ILiveShop } from "./components/live-shop/live-shop.type";
import { IHighlightCardItem as IHighlightCardItem1 } from "./components";
import { BasePrice, PaymentOption } from "./components/ui/product-price/product-price.type";
export { IColor, IInputSelectDataEvent, IProductCard, ISelectVariation } from "./components/ui/product-card/product-card.type";
export { EnumBuyTogetherOnLoadStatus, IBuyTogetherComponentData } from "./components/buy-together/buy-together.type";
export { ICashback } from "./components/cashback/cashback.type";
export { IFrontSelectOption } from "./components/ui/front-select/front-select.type";
export { IHighlightCardItem } from "./components/ui/highlight-card/highlight-card.type";
export { ILiveShop } from "./components/live-shop/live-shop.type";
export { IHighlightCardItem as IHighlightCardItem1 } from "./components";
export { BasePrice, PaymentOption } from "./components/ui/product-price/product-price.type";
export namespace Components {
    interface BuyTogether {
        "buyButtonText": string;
        "getBuyTogetherData": () => Promise<IBuyTogetherComponentData>;
        "productId": number;
        "promotionTitle": string;
        "showcaseMode"?: boolean;
        "variationId": number;
    }
    interface BuyTogetherCartModal {
        "buyButtonText"?: string;
        "containerTitle": string;
        "productId": number;
        "promotionTitle"?: string;
        "variationId"?: number;
    }
    interface CashbackCredit {
        "cashback": ICashback | null;
        "customer_id": number | null;
        "product": { id: number; price: number };
    }
    interface ColorSelector {
        "colors": IColor[];
        "selectedId"?: number;
    }
    interface CustomCard {
        "cardDescription": string;
        "cardTitle": string;
        "customClass": string;
    }
    interface FrontCountdown {
        "endDate": string;
        "startDate": string;
    }
    interface FrontIcon {
        "color": string;
        "name": string;
        "size"?: string;
    }
    interface FrontImage {
        "figCaption": string;
        "imageSrc": string;
        "textAlt": string;
    }
    interface FrontSelect {
        "label": string;
        "optionsList": IFrontSelectOption[];
        "placeholder": IFrontSelectOption;
        "selectId": string;
        "selectName": string;
        "value": any;
    }
    interface GoogleRecaptcha {
        "siteKey": string;
    }
    interface HighlightCard {
        "items": IHighlightCardItem[];
    }
    interface InfoModal {
        "hideButtons": boolean;
        "modalDescription": string;
        "modalTitle": string;
        "position": 'bottom' | 'center' | 'top';
        "primaryButtonText": string;
        "secondaryButtonText": string;
    }
    interface LaunchCountdown {
        "dataCountdownTitle": string;
        "dataDescription": string;
        "dataInitialDate": string;
        "dataTargetDate": string;
        "productId": string;
        "variationId": string;
    }
    interface LaunchMode {
    }
    interface LiveShop {
        "hashRoom": string;
    }
    interface LiveShopDesktop {
        "isChatOpen": boolean;
        "items": IHighlightCardItem1[];
        "liveShopData": ILiveShop;
        "toggleChat": () => void;
        "videoId": string;
    }
    interface LiveShopMobile {
        "items": IHighlightCardItem1[];
        "liveShopData": ILiveShop;
        "videoId": string;
    }
    interface LiveShopNotFound {
    }
    interface LiveVideoChat {
        "videoId": string;
    }
    interface LiveVideoPlayer {
        "autoPlay": boolean;
        "mute": boolean;
        "videoId": string;
    }
    interface MaintenanceMode {
    }
    interface MiniPlayer {
        "autoPlay": boolean;
        "buttonText": string;
        "mainTitle": string;
        "videoId": string;
    }
    interface ProductCard {
        "basePrice": BasePrice;
        "customClass": string;
        "inline": boolean;
        "paymentOptions"?: PaymentOption[];
        "product": IProductCard;
        "showStartingFrom"?: boolean;
    }
    interface ProductPrice {
        "basePrice": BasePrice;
        "paymentOptions"?: PaymentOption[];
        "showStartingFrom"?: boolean;
    }
    interface ProductPriceBillet {
        "price": number;
        "priceCompare"?: number;
    }
    interface ProductPriceCreditCard {
        "hasInterest": boolean;
        "parcelPrice": number;
        "parcels": number;
        "price": number;
        "priceCompare"?: number;
    }
    interface ProductPricePix {
        "price": number;
        "priceCompare"?: number;
    }
    interface ProductPriceSimple {
        "price": number;
        "priceCompare"?: number;
        "showStartingFrom"?: boolean;
    }
    interface ShowcaseRelated {
        "buttonLabel": string;
        "buyTogetherProductIds": string;
        "load": () => Promise<void>;
        "productsPerPage": number;
        "showArrows": boolean;
        "showcaseTitle": string;
    }
    interface TabSelector {
        "tabs": { name: string; label: string | any; content: () => any }[];
    }
    interface VariationSelector {
        "productId": number;
        "showcaseMode": boolean;
        "variations": ISelectVariation[];
    }
}
export interface BuyTogetherCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBuyTogetherElement;
}
export interface BuyTogetherCartModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBuyTogetherCartModalElement;
}
export interface ColorSelectorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLColorSelectorElement;
}
export interface CustomCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCustomCardElement;
}
export interface FrontCountdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFrontCountdownElement;
}
export interface GoogleRecaptchaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoogleRecaptchaElement;
}
export interface HighlightCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLHighlightCardElement;
}
export interface InfoModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLInfoModalElement;
}
export interface LaunchCountdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLaunchCountdownElement;
}
export interface LaunchModeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLaunchModeElement;
}
export interface LiveShopCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLiveShopElement;
}
export interface LiveShopDesktopCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLiveShopDesktopElement;
}
export interface LiveShopMobileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLiveShopMobileElement;
}
export interface LiveShopNotFoundCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLiveShopNotFoundElement;
}
export interface LiveVideoChatCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLiveVideoChatElement;
}
export interface LiveVideoPlayerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLiveVideoPlayerElement;
}
export interface MaintenanceModeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMaintenanceModeElement;
}
export interface MiniPlayerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMiniPlayerElement;
}
export interface ShowcaseRelatedCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLShowcaseRelatedElement;
}
export interface VariationSelectorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVariationSelectorElement;
}
declare global {
    interface HTMLBuyTogetherElementEventMap {
        "on-buy-together-add-cart": { showcaseMode: boolean; productsAdded: IProductCard[] };
        "loadBuyTogehter": {
    status: EnumBuyTogetherOnLoadStatus;
    data: IBuyTogetherComponentData | null;
  };
    }
    interface HTMLBuyTogetherElement extends Components.BuyTogether, HTMLStencilElement {
        addEventListener<K extends keyof HTMLBuyTogetherElementEventMap>(type: K, listener: (this: HTMLBuyTogetherElement, ev: BuyTogetherCustomEvent<HTMLBuyTogetherElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLBuyTogetherElementEventMap>(type: K, listener: (this: HTMLBuyTogetherElement, ev: BuyTogetherCustomEvent<HTMLBuyTogetherElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLBuyTogetherElement: {
        prototype: HTMLBuyTogetherElement;
        new (): HTMLBuyTogetherElement;
    };
    interface HTMLBuyTogetherCartModalElementEventMap {
        "on-finish-buy-button": void;
        "on-continue-buy-button": void;
        "componentRendered": void;
    }
    interface HTMLBuyTogetherCartModalElement extends Components.BuyTogetherCartModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLBuyTogetherCartModalElementEventMap>(type: K, listener: (this: HTMLBuyTogetherCartModalElement, ev: BuyTogetherCartModalCustomEvent<HTMLBuyTogetherCartModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLBuyTogetherCartModalElementEventMap>(type: K, listener: (this: HTMLBuyTogetherCartModalElement, ev: BuyTogetherCartModalCustomEvent<HTMLBuyTogetherCartModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLBuyTogetherCartModalElement: {
        prototype: HTMLBuyTogetherCartModalElement;
        new (): HTMLBuyTogetherCartModalElement;
    };
    interface HTMLCashbackCreditElement extends Components.CashbackCredit, HTMLStencilElement {
    }
    var HTMLCashbackCreditElement: {
        prototype: HTMLCashbackCreditElement;
        new (): HTMLCashbackCreditElement;
    };
    interface HTMLColorSelectorElementEventMap {
        "colorSelected": IColor;
    }
    interface HTMLColorSelectorElement extends Components.ColorSelector, HTMLStencilElement {
        addEventListener<K extends keyof HTMLColorSelectorElementEventMap>(type: K, listener: (this: HTMLColorSelectorElement, ev: ColorSelectorCustomEvent<HTMLColorSelectorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLColorSelectorElementEventMap>(type: K, listener: (this: HTMLColorSelectorElement, ev: ColorSelectorCustomEvent<HTMLColorSelectorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLColorSelectorElement: {
        prototype: HTMLColorSelectorElement;
        new (): HTMLColorSelectorElement;
    };
    interface HTMLCustomCardElementEventMap {
        "componentRendered": void;
    }
    interface HTMLCustomCardElement extends Components.CustomCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCustomCardElementEventMap>(type: K, listener: (this: HTMLCustomCardElement, ev: CustomCardCustomEvent<HTMLCustomCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCustomCardElementEventMap>(type: K, listener: (this: HTMLCustomCardElement, ev: CustomCardCustomEvent<HTMLCustomCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCustomCardElement: {
        prototype: HTMLCustomCardElement;
        new (): HTMLCustomCardElement;
    };
    interface HTMLFrontCountdownElementEventMap {
        "countdownFinished": any;
    }
    interface HTMLFrontCountdownElement extends Components.FrontCountdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLFrontCountdownElementEventMap>(type: K, listener: (this: HTMLFrontCountdownElement, ev: FrontCountdownCustomEvent<HTMLFrontCountdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLFrontCountdownElementEventMap>(type: K, listener: (this: HTMLFrontCountdownElement, ev: FrontCountdownCustomEvent<HTMLFrontCountdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLFrontCountdownElement: {
        prototype: HTMLFrontCountdownElement;
        new (): HTMLFrontCountdownElement;
    };
    interface HTMLFrontIconElement extends Components.FrontIcon, HTMLStencilElement {
    }
    var HTMLFrontIconElement: {
        prototype: HTMLFrontIconElement;
        new (): HTMLFrontIconElement;
    };
    interface HTMLFrontImageElement extends Components.FrontImage, HTMLStencilElement {
    }
    var HTMLFrontImageElement: {
        prototype: HTMLFrontImageElement;
        new (): HTMLFrontImageElement;
    };
    interface HTMLFrontSelectElement extends Components.FrontSelect, HTMLStencilElement {
    }
    var HTMLFrontSelectElement: {
        prototype: HTMLFrontSelectElement;
        new (): HTMLFrontSelectElement;
    };
    interface HTMLGoogleRecaptchaElementEventMap {
        "tokenReceived": string;
    }
    interface HTMLGoogleRecaptchaElement extends Components.GoogleRecaptcha, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGoogleRecaptchaElementEventMap>(type: K, listener: (this: HTMLGoogleRecaptchaElement, ev: GoogleRecaptchaCustomEvent<HTMLGoogleRecaptchaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGoogleRecaptchaElementEventMap>(type: K, listener: (this: HTMLGoogleRecaptchaElement, ev: GoogleRecaptchaCustomEvent<HTMLGoogleRecaptchaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGoogleRecaptchaElement: {
        prototype: HTMLGoogleRecaptchaElement;
        new (): HTMLGoogleRecaptchaElement;
    };
    interface HTMLHighlightCardElementEventMap {
        "addItem": IHighlightCardItem;
        "componentRendered": void;
    }
    interface HTMLHighlightCardElement extends Components.HighlightCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLHighlightCardElementEventMap>(type: K, listener: (this: HTMLHighlightCardElement, ev: HighlightCardCustomEvent<HTMLHighlightCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLHighlightCardElementEventMap>(type: K, listener: (this: HTMLHighlightCardElement, ev: HighlightCardCustomEvent<HTMLHighlightCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLHighlightCardElement: {
        prototype: HTMLHighlightCardElement;
        new (): HTMLHighlightCardElement;
    };
    interface HTMLInfoModalElementEventMap {
        "componentRendered": void;
        "on-click-primary-button": void;
        "on-click-secondary-button": void;
    }
    interface HTMLInfoModalElement extends Components.InfoModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLInfoModalElementEventMap>(type: K, listener: (this: HTMLInfoModalElement, ev: InfoModalCustomEvent<HTMLInfoModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLInfoModalElementEventMap>(type: K, listener: (this: HTMLInfoModalElement, ev: InfoModalCustomEvent<HTMLInfoModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLInfoModalElement: {
        prototype: HTMLInfoModalElement;
        new (): HTMLInfoModalElement;
    };
    interface HTMLLaunchCountdownElementEventMap {
        "countdownLoaded": { releaseDateActive: boolean };
    }
    interface HTMLLaunchCountdownElement extends Components.LaunchCountdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLaunchCountdownElementEventMap>(type: K, listener: (this: HTMLLaunchCountdownElement, ev: LaunchCountdownCustomEvent<HTMLLaunchCountdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLaunchCountdownElementEventMap>(type: K, listener: (this: HTMLLaunchCountdownElement, ev: LaunchCountdownCustomEvent<HTMLLaunchCountdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLaunchCountdownElement: {
        prototype: HTMLLaunchCountdownElement;
        new (): HTMLLaunchCountdownElement;
    };
    interface HTMLLaunchModeElementEventMap {
        "componentRendered": void;
    }
    interface HTMLLaunchModeElement extends Components.LaunchMode, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLaunchModeElementEventMap>(type: K, listener: (this: HTMLLaunchModeElement, ev: LaunchModeCustomEvent<HTMLLaunchModeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLaunchModeElementEventMap>(type: K, listener: (this: HTMLLaunchModeElement, ev: LaunchModeCustomEvent<HTMLLaunchModeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLaunchModeElement: {
        prototype: HTMLLaunchModeElement;
        new (): HTMLLaunchModeElement;
    };
    interface HTMLLiveShopElementEventMap {
        "on-return-to-home": void;
        "componentRendered": void;
    }
    interface HTMLLiveShopElement extends Components.LiveShop, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLiveShopElementEventMap>(type: K, listener: (this: HTMLLiveShopElement, ev: LiveShopCustomEvent<HTMLLiveShopElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLiveShopElementEventMap>(type: K, listener: (this: HTMLLiveShopElement, ev: LiveShopCustomEvent<HTMLLiveShopElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLiveShopElement: {
        prototype: HTMLLiveShopElement;
        new (): HTMLLiveShopElement;
    };
    interface HTMLLiveShopDesktopElementEventMap {
        "on-click-add": {
    item: IHighlightCardItem1;
    liveShopData: ILiveShop;
  };
    }
    interface HTMLLiveShopDesktopElement extends Components.LiveShopDesktop, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLiveShopDesktopElementEventMap>(type: K, listener: (this: HTMLLiveShopDesktopElement, ev: LiveShopDesktopCustomEvent<HTMLLiveShopDesktopElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLiveShopDesktopElementEventMap>(type: K, listener: (this: HTMLLiveShopDesktopElement, ev: LiveShopDesktopCustomEvent<HTMLLiveShopDesktopElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLiveShopDesktopElement: {
        prototype: HTMLLiveShopDesktopElement;
        new (): HTMLLiveShopDesktopElement;
    };
    interface HTMLLiveShopMobileElementEventMap {
        "on-click-add": {
    item: IHighlightCardItem1;
    liveShopData: ILiveShop;
  };
    }
    interface HTMLLiveShopMobileElement extends Components.LiveShopMobile, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLiveShopMobileElementEventMap>(type: K, listener: (this: HTMLLiveShopMobileElement, ev: LiveShopMobileCustomEvent<HTMLLiveShopMobileElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLiveShopMobileElementEventMap>(type: K, listener: (this: HTMLLiveShopMobileElement, ev: LiveShopMobileCustomEvent<HTMLLiveShopMobileElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLiveShopMobileElement: {
        prototype: HTMLLiveShopMobileElement;
        new (): HTMLLiveShopMobileElement;
    };
    interface HTMLLiveShopNotFoundElementEventMap {
        "returnToHome": void;
    }
    interface HTMLLiveShopNotFoundElement extends Components.LiveShopNotFound, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLiveShopNotFoundElementEventMap>(type: K, listener: (this: HTMLLiveShopNotFoundElement, ev: LiveShopNotFoundCustomEvent<HTMLLiveShopNotFoundElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLiveShopNotFoundElementEventMap>(type: K, listener: (this: HTMLLiveShopNotFoundElement, ev: LiveShopNotFoundCustomEvent<HTMLLiveShopNotFoundElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLiveShopNotFoundElement: {
        prototype: HTMLLiveShopNotFoundElement;
        new (): HTMLLiveShopNotFoundElement;
    };
    interface HTMLLiveVideoChatElementEventMap {
        "componentRendered": void;
    }
    interface HTMLLiveVideoChatElement extends Components.LiveVideoChat, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLiveVideoChatElementEventMap>(type: K, listener: (this: HTMLLiveVideoChatElement, ev: LiveVideoChatCustomEvent<HTMLLiveVideoChatElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLiveVideoChatElementEventMap>(type: K, listener: (this: HTMLLiveVideoChatElement, ev: LiveVideoChatCustomEvent<HTMLLiveVideoChatElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLiveVideoChatElement: {
        prototype: HTMLLiveVideoChatElement;
        new (): HTMLLiveVideoChatElement;
    };
    interface HTMLLiveVideoPlayerElementEventMap {
        "componentRendered": void;
    }
    interface HTMLLiveVideoPlayerElement extends Components.LiveVideoPlayer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLiveVideoPlayerElementEventMap>(type: K, listener: (this: HTMLLiveVideoPlayerElement, ev: LiveVideoPlayerCustomEvent<HTMLLiveVideoPlayerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLiveVideoPlayerElementEventMap>(type: K, listener: (this: HTMLLiveVideoPlayerElement, ev: LiveVideoPlayerCustomEvent<HTMLLiveVideoPlayerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLiveVideoPlayerElement: {
        prototype: HTMLLiveVideoPlayerElement;
        new (): HTMLLiveVideoPlayerElement;
    };
    interface HTMLMaintenanceModeElementEventMap {
        "componentRendered": void;
    }
    interface HTMLMaintenanceModeElement extends Components.MaintenanceMode, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMaintenanceModeElementEventMap>(type: K, listener: (this: HTMLMaintenanceModeElement, ev: MaintenanceModeCustomEvent<HTMLMaintenanceModeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMaintenanceModeElementEventMap>(type: K, listener: (this: HTMLMaintenanceModeElement, ev: MaintenanceModeCustomEvent<HTMLMaintenanceModeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMaintenanceModeElement: {
        prototype: HTMLMaintenanceModeElement;
        new (): HTMLMaintenanceModeElement;
    };
    interface HTMLMiniPlayerElementEventMap {
        "on-click-miniplayer-button": void;
        "componentRendered": void;
    }
    interface HTMLMiniPlayerElement extends Components.MiniPlayer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMiniPlayerElementEventMap>(type: K, listener: (this: HTMLMiniPlayerElement, ev: MiniPlayerCustomEvent<HTMLMiniPlayerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMiniPlayerElementEventMap>(type: K, listener: (this: HTMLMiniPlayerElement, ev: MiniPlayerCustomEvent<HTMLMiniPlayerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMiniPlayerElement: {
        prototype: HTMLMiniPlayerElement;
        new (): HTMLMiniPlayerElement;
    };
    interface HTMLProductCardElement extends Components.ProductCard, HTMLStencilElement {
    }
    var HTMLProductCardElement: {
        prototype: HTMLProductCardElement;
        new (): HTMLProductCardElement;
    };
    interface HTMLProductPriceElement extends Components.ProductPrice, HTMLStencilElement {
    }
    var HTMLProductPriceElement: {
        prototype: HTMLProductPriceElement;
        new (): HTMLProductPriceElement;
    };
    interface HTMLProductPriceBilletElement extends Components.ProductPriceBillet, HTMLStencilElement {
    }
    var HTMLProductPriceBilletElement: {
        prototype: HTMLProductPriceBilletElement;
        new (): HTMLProductPriceBilletElement;
    };
    interface HTMLProductPriceCreditCardElement extends Components.ProductPriceCreditCard, HTMLStencilElement {
    }
    var HTMLProductPriceCreditCardElement: {
        prototype: HTMLProductPriceCreditCardElement;
        new (): HTMLProductPriceCreditCardElement;
    };
    interface HTMLProductPricePixElement extends Components.ProductPricePix, HTMLStencilElement {
    }
    var HTMLProductPricePixElement: {
        prototype: HTMLProductPricePixElement;
        new (): HTMLProductPricePixElement;
    };
    interface HTMLProductPriceSimpleElement extends Components.ProductPriceSimple, HTMLStencilElement {
    }
    var HTMLProductPriceSimpleElement: {
        prototype: HTMLProductPriceSimpleElement;
        new (): HTMLProductPriceSimpleElement;
    };
    interface HTMLShowcaseRelatedElementEventMap {
        "clickBuyButton": any;
    }
    interface HTMLShowcaseRelatedElement extends Components.ShowcaseRelated, HTMLStencilElement {
        addEventListener<K extends keyof HTMLShowcaseRelatedElementEventMap>(type: K, listener: (this: HTMLShowcaseRelatedElement, ev: ShowcaseRelatedCustomEvent<HTMLShowcaseRelatedElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLShowcaseRelatedElementEventMap>(type: K, listener: (this: HTMLShowcaseRelatedElement, ev: ShowcaseRelatedCustomEvent<HTMLShowcaseRelatedElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLShowcaseRelatedElement: {
        prototype: HTMLShowcaseRelatedElement;
        new (): HTMLShowcaseRelatedElement;
    };
    interface HTMLTabSelectorElement extends Components.TabSelector, HTMLStencilElement {
    }
    var HTMLTabSelectorElement: {
        prototype: HTMLTabSelectorElement;
        new (): HTMLTabSelectorElement;
    };
    interface HTMLVariationSelectorElementEventMap {
        "inputSelect": IInputSelectDataEvent;
    }
    interface HTMLVariationSelectorElement extends Components.VariationSelector, HTMLStencilElement {
        addEventListener<K extends keyof HTMLVariationSelectorElementEventMap>(type: K, listener: (this: HTMLVariationSelectorElement, ev: VariationSelectorCustomEvent<HTMLVariationSelectorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLVariationSelectorElementEventMap>(type: K, listener: (this: HTMLVariationSelectorElement, ev: VariationSelectorCustomEvent<HTMLVariationSelectorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLVariationSelectorElement: {
        prototype: HTMLVariationSelectorElement;
        new (): HTMLVariationSelectorElement;
    };
    interface HTMLElementTagNameMap {
        "buy-together": HTMLBuyTogetherElement;
        "buy-together-cart-modal": HTMLBuyTogetherCartModalElement;
        "cashback-credit": HTMLCashbackCreditElement;
        "color-selector": HTMLColorSelectorElement;
        "custom-card": HTMLCustomCardElement;
        "front-countdown": HTMLFrontCountdownElement;
        "front-icon": HTMLFrontIconElement;
        "front-image": HTMLFrontImageElement;
        "front-select": HTMLFrontSelectElement;
        "google-recaptcha": HTMLGoogleRecaptchaElement;
        "highlight-card": HTMLHighlightCardElement;
        "info-modal": HTMLInfoModalElement;
        "launch-countdown": HTMLLaunchCountdownElement;
        "launch-mode": HTMLLaunchModeElement;
        "live-shop": HTMLLiveShopElement;
        "live-shop-desktop": HTMLLiveShopDesktopElement;
        "live-shop-mobile": HTMLLiveShopMobileElement;
        "live-shop-not-found": HTMLLiveShopNotFoundElement;
        "live-video-chat": HTMLLiveVideoChatElement;
        "live-video-player": HTMLLiveVideoPlayerElement;
        "maintenance-mode": HTMLMaintenanceModeElement;
        "mini-player": HTMLMiniPlayerElement;
        "product-card": HTMLProductCardElement;
        "product-price": HTMLProductPriceElement;
        "product-price-billet": HTMLProductPriceBilletElement;
        "product-price-credit-card": HTMLProductPriceCreditCardElement;
        "product-price-pix": HTMLProductPricePixElement;
        "product-price-simple": HTMLProductPriceSimpleElement;
        "showcase-related": HTMLShowcaseRelatedElement;
        "tab-selector": HTMLTabSelectorElement;
        "variation-selector": HTMLVariationSelectorElement;
    }
}
declare namespace LocalJSX {
    interface BuyTogether {
        "buyButtonText"?: string;
        "onLoadBuyTogehter"?: (event: BuyTogetherCustomEvent<{
    status: EnumBuyTogetherOnLoadStatus;
    data: IBuyTogetherComponentData | null;
  }>) => void;
        "onOn-buy-together-add-cart"?: (event: BuyTogetherCustomEvent<{ showcaseMode: boolean; productsAdded: IProductCard[] }>) => void;
        "productId"?: number;
        "promotionTitle"?: string;
        "showcaseMode"?: boolean;
        "variationId"?: number;
    }
    interface BuyTogetherCartModal {
        "buyButtonText"?: string;
        "containerTitle"?: string;
        "onComponentRendered"?: (event: BuyTogetherCartModalCustomEvent<void>) => void;
        "onOn-continue-buy-button"?: (event: BuyTogetherCartModalCustomEvent<void>) => void;
        "onOn-finish-buy-button"?: (event: BuyTogetherCartModalCustomEvent<void>) => void;
        "productId"?: number;
        "promotionTitle"?: string;
        "variationId"?: number;
    }
    interface CashbackCredit {
        "cashback"?: ICashback | null;
        "customer_id"?: number | null;
        "product"?: { id: number; price: number };
    }
    interface ColorSelector {
        "colors"?: IColor[];
        "onColorSelected"?: (event: ColorSelectorCustomEvent<IColor>) => void;
        "selectedId"?: number;
    }
    interface CustomCard {
        "cardDescription"?: string;
        "cardTitle"?: string;
        "customClass"?: string;
        "onComponentRendered"?: (event: CustomCardCustomEvent<void>) => void;
    }
    interface FrontCountdown {
        "endDate"?: string;
        "onCountdownFinished"?: (event: FrontCountdownCustomEvent<any>) => void;
        "startDate"?: string;
    }
    interface FrontIcon {
        "color"?: string;
        "name"?: string;
        "size"?: string;
    }
    interface FrontImage {
        "figCaption"?: string;
        "imageSrc"?: string;
        "textAlt"?: string;
    }
    interface FrontSelect {
        "label"?: string;
        "optionsList"?: IFrontSelectOption[];
        "placeholder"?: IFrontSelectOption;
        "selectId"?: string;
        "selectName"?: string;
        "value"?: any;
    }
    interface GoogleRecaptcha {
        "onTokenReceived"?: (event: GoogleRecaptchaCustomEvent<string>) => void;
        "siteKey"?: string;
    }
    interface HighlightCard {
        "items"?: IHighlightCardItem[];
        "onAddItem"?: (event: HighlightCardCustomEvent<IHighlightCardItem>) => void;
        "onComponentRendered"?: (event: HighlightCardCustomEvent<void>) => void;
    }
    interface InfoModal {
        "hideButtons"?: boolean;
        "modalDescription"?: string;
        "modalTitle"?: string;
        "onComponentRendered"?: (event: InfoModalCustomEvent<void>) => void;
        "onOn-click-primary-button"?: (event: InfoModalCustomEvent<void>) => void;
        "onOn-click-secondary-button"?: (event: InfoModalCustomEvent<void>) => void;
        "position"?: 'bottom' | 'center' | 'top';
        "primaryButtonText"?: string;
        "secondaryButtonText"?: string;
    }
    interface LaunchCountdown {
        "dataCountdownTitle"?: string;
        "dataDescription"?: string;
        "dataInitialDate"?: string;
        "dataTargetDate"?: string;
        "onCountdownLoaded"?: (event: LaunchCountdownCustomEvent<{ releaseDateActive: boolean }>) => void;
        "productId"?: string;
        "variationId"?: string;
    }
    interface LaunchMode {
        "onComponentRendered"?: (event: LaunchModeCustomEvent<void>) => void;
    }
    interface LiveShop {
        "hashRoom"?: string;
        "onComponentRendered"?: (event: LiveShopCustomEvent<void>) => void;
        "onOn-return-to-home"?: (event: LiveShopCustomEvent<void>) => void;
    }
    interface LiveShopDesktop {
        "isChatOpen"?: boolean;
        "items"?: IHighlightCardItem1[];
        "liveShopData"?: ILiveShop;
        "onOn-click-add"?: (event: LiveShopDesktopCustomEvent<{
    item: IHighlightCardItem1;
    liveShopData: ILiveShop;
  }>) => void;
        "toggleChat"?: () => void;
        "videoId"?: string;
    }
    interface LiveShopMobile {
        "items"?: IHighlightCardItem1[];
        "liveShopData"?: ILiveShop;
        "onOn-click-add"?: (event: LiveShopMobileCustomEvent<{
    item: IHighlightCardItem1;
    liveShopData: ILiveShop;
  }>) => void;
        "videoId"?: string;
    }
    interface LiveShopNotFound {
        "onReturnToHome"?: (event: LiveShopNotFoundCustomEvent<void>) => void;
    }
    interface LiveVideoChat {
        "onComponentRendered"?: (event: LiveVideoChatCustomEvent<void>) => void;
        "videoId"?: string;
    }
    interface LiveVideoPlayer {
        "autoPlay"?: boolean;
        "mute"?: boolean;
        "onComponentRendered"?: (event: LiveVideoPlayerCustomEvent<void>) => void;
        "videoId"?: string;
    }
    interface MaintenanceMode {
        "onComponentRendered"?: (event: MaintenanceModeCustomEvent<void>) => void;
    }
    interface MiniPlayer {
        "autoPlay"?: boolean;
        "buttonText"?: string;
        "mainTitle"?: string;
        "onComponentRendered"?: (event: MiniPlayerCustomEvent<void>) => void;
        "onOn-click-miniplayer-button"?: (event: MiniPlayerCustomEvent<void>) => void;
        "videoId"?: string;
    }
    interface ProductCard {
        "basePrice"?: BasePrice;
        "customClass"?: string;
        "inline"?: boolean;
        "paymentOptions"?: PaymentOption[];
        "product"?: IProductCard;
        "showStartingFrom"?: boolean;
    }
    interface ProductPrice {
        "basePrice"?: BasePrice;
        "paymentOptions"?: PaymentOption[];
        "showStartingFrom"?: boolean;
    }
    interface ProductPriceBillet {
        "price"?: number;
        "priceCompare"?: number;
    }
    interface ProductPriceCreditCard {
        "hasInterest"?: boolean;
        "parcelPrice"?: number;
        "parcels"?: number;
        "price"?: number;
        "priceCompare"?: number;
    }
    interface ProductPricePix {
        "price"?: number;
        "priceCompare"?: number;
    }
    interface ProductPriceSimple {
        "price"?: number;
        "priceCompare"?: number;
        "showStartingFrom"?: boolean;
    }
    interface ShowcaseRelated {
        "buttonLabel"?: string;
        "buyTogetherProductIds"?: string;
        "onClickBuyButton"?: (event: ShowcaseRelatedCustomEvent<any>) => void;
        "productsPerPage"?: number;
        "showArrows"?: boolean;
        "showcaseTitle"?: string;
    }
    interface TabSelector {
        "tabs"?: { name: string; label: string | any; content: () => any }[];
    }
    interface VariationSelector {
        "onInputSelect"?: (event: VariationSelectorCustomEvent<IInputSelectDataEvent>) => void;
        "productId"?: number;
        "showcaseMode"?: boolean;
        "variations"?: ISelectVariation[];
    }
    interface IntrinsicElements {
        "buy-together": BuyTogether;
        "buy-together-cart-modal": BuyTogetherCartModal;
        "cashback-credit": CashbackCredit;
        "color-selector": ColorSelector;
        "custom-card": CustomCard;
        "front-countdown": FrontCountdown;
        "front-icon": FrontIcon;
        "front-image": FrontImage;
        "front-select": FrontSelect;
        "google-recaptcha": GoogleRecaptcha;
        "highlight-card": HighlightCard;
        "info-modal": InfoModal;
        "launch-countdown": LaunchCountdown;
        "launch-mode": LaunchMode;
        "live-shop": LiveShop;
        "live-shop-desktop": LiveShopDesktop;
        "live-shop-mobile": LiveShopMobile;
        "live-shop-not-found": LiveShopNotFound;
        "live-video-chat": LiveVideoChat;
        "live-video-player": LiveVideoPlayer;
        "maintenance-mode": MaintenanceMode;
        "mini-player": MiniPlayer;
        "product-card": ProductCard;
        "product-price": ProductPrice;
        "product-price-billet": ProductPriceBillet;
        "product-price-credit-card": ProductPriceCreditCard;
        "product-price-pix": ProductPricePix;
        "product-price-simple": ProductPriceSimple;
        "showcase-related": ShowcaseRelated;
        "tab-selector": TabSelector;
        "variation-selector": VariationSelector;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "buy-together": LocalJSX.BuyTogether & JSXBase.HTMLAttributes<HTMLBuyTogetherElement>;
            "buy-together-cart-modal": LocalJSX.BuyTogetherCartModal & JSXBase.HTMLAttributes<HTMLBuyTogetherCartModalElement>;
            "cashback-credit": LocalJSX.CashbackCredit & JSXBase.HTMLAttributes<HTMLCashbackCreditElement>;
            "color-selector": LocalJSX.ColorSelector & JSXBase.HTMLAttributes<HTMLColorSelectorElement>;
            "custom-card": LocalJSX.CustomCard & JSXBase.HTMLAttributes<HTMLCustomCardElement>;
            "front-countdown": LocalJSX.FrontCountdown & JSXBase.HTMLAttributes<HTMLFrontCountdownElement>;
            "front-icon": LocalJSX.FrontIcon & JSXBase.HTMLAttributes<HTMLFrontIconElement>;
            "front-image": LocalJSX.FrontImage & JSXBase.HTMLAttributes<HTMLFrontImageElement>;
            "front-select": LocalJSX.FrontSelect & JSXBase.HTMLAttributes<HTMLFrontSelectElement>;
            "google-recaptcha": LocalJSX.GoogleRecaptcha & JSXBase.HTMLAttributes<HTMLGoogleRecaptchaElement>;
            "highlight-card": LocalJSX.HighlightCard & JSXBase.HTMLAttributes<HTMLHighlightCardElement>;
            "info-modal": LocalJSX.InfoModal & JSXBase.HTMLAttributes<HTMLInfoModalElement>;
            "launch-countdown": LocalJSX.LaunchCountdown & JSXBase.HTMLAttributes<HTMLLaunchCountdownElement>;
            "launch-mode": LocalJSX.LaunchMode & JSXBase.HTMLAttributes<HTMLLaunchModeElement>;
            "live-shop": LocalJSX.LiveShop & JSXBase.HTMLAttributes<HTMLLiveShopElement>;
            "live-shop-desktop": LocalJSX.LiveShopDesktop & JSXBase.HTMLAttributes<HTMLLiveShopDesktopElement>;
            "live-shop-mobile": LocalJSX.LiveShopMobile & JSXBase.HTMLAttributes<HTMLLiveShopMobileElement>;
            "live-shop-not-found": LocalJSX.LiveShopNotFound & JSXBase.HTMLAttributes<HTMLLiveShopNotFoundElement>;
            "live-video-chat": LocalJSX.LiveVideoChat & JSXBase.HTMLAttributes<HTMLLiveVideoChatElement>;
            "live-video-player": LocalJSX.LiveVideoPlayer & JSXBase.HTMLAttributes<HTMLLiveVideoPlayerElement>;
            "maintenance-mode": LocalJSX.MaintenanceMode & JSXBase.HTMLAttributes<HTMLMaintenanceModeElement>;
            "mini-player": LocalJSX.MiniPlayer & JSXBase.HTMLAttributes<HTMLMiniPlayerElement>;
            "product-card": LocalJSX.ProductCard & JSXBase.HTMLAttributes<HTMLProductCardElement>;
            "product-price": LocalJSX.ProductPrice & JSXBase.HTMLAttributes<HTMLProductPriceElement>;
            "product-price-billet": LocalJSX.ProductPriceBillet & JSXBase.HTMLAttributes<HTMLProductPriceBilletElement>;
            "product-price-credit-card": LocalJSX.ProductPriceCreditCard & JSXBase.HTMLAttributes<HTMLProductPriceCreditCardElement>;
            "product-price-pix": LocalJSX.ProductPricePix & JSXBase.HTMLAttributes<HTMLProductPricePixElement>;
            "product-price-simple": LocalJSX.ProductPriceSimple & JSXBase.HTMLAttributes<HTMLProductPriceSimpleElement>;
            "showcase-related": LocalJSX.ShowcaseRelated & JSXBase.HTMLAttributes<HTMLShowcaseRelatedElement>;
            "tab-selector": LocalJSX.TabSelector & JSXBase.HTMLAttributes<HTMLTabSelectorElement>;
            "variation-selector": LocalJSX.VariationSelector & JSXBase.HTMLAttributes<HTMLVariationSelectorElement>;
        }
    }
}
