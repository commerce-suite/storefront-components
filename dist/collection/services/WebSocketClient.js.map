{"version":3,"file":"WebSocketClient.js","sourceRoot":"","sources":["../../src/services/WebSocketClient.ts"],"names":[],"mappings":"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","sourcesContent":["export class WebSocketClient {\n  private static readonly MAX_RECONNECT_ATTEMPTS = 5;\n  private static readonly INITIAL_RECONNECT_DELAY = 5000;\n  private static readonly MAX_RECONNECT_DELAY = 30000;\n  private static readonly INITIAL_INCREMENT_DELAY = 1000;\n\n  private socket: WebSocket | null = null;\n  private reconnectAttempts = 0;\n  private reconnectTimeout: number | null = null;\n  private url: string;\n  private messageCallback: ((event: MessageEvent) => void) | null = null;\n\n  constructor(url: string) {\n    this.url = url;\n    this.connect();\n  }\n\n  private connect() {\n    if (this.socket) {\n      this.socket.onclose = null;\n      this.socket.onerror = null;\n      this.socket.onmessage = null;\n    }\n\n    this.socket = new WebSocket(this.url);\n\n    this.socket.onopen = this.onOpen;\n    this.socket.onclose = this.onClose;\n    this.socket.onerror = this.onError;\n  }\n\n  private onOpen = () => {\n    this.reconnectAttempts = 0;\n\n    if (this.messageCallback && this.socket) {\n      this.socket.addEventListener('message', this.messageCallback);\n    }\n  };\n\n  public onClose = (event: CloseEvent) => {\n    if (!event.wasClean) this.handleReconnect();\n  };\n\n  private onError = () => {\n    this.handleReconnect();\n  };\n\n  private handleReconnect() {\n    if (this.reconnectTimeout !== null) return;\n\n    if (this.reconnectAttempts >= WebSocketClient.MAX_RECONNECT_ATTEMPTS) return;\n\n    const delay =\n      this.reconnectAttempts === 0\n        ? WebSocketClient.INITIAL_INCREMENT_DELAY\n        : Math.min(\n            WebSocketClient.INITIAL_RECONNECT_DELAY * Math.pow(2, this.reconnectAttempts - 1),\n            WebSocketClient.MAX_RECONNECT_DELAY,\n          );\n\n    this.reconnectTimeout = window.setTimeout(() => {\n      this.reconnectAttempts++;\n      this.reconnectTimeout = null;\n      this.connect();\n    }, delay);\n  }\n\n  public closeConnection() {\n    if (this.socket?.readyState === WebSocket.OPEN) {\n      this.socket.close();\n    }\n    if (this.reconnectTimeout !== null) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n  }\n\n  public onMessage(callback: (event: MessageEvent) => void) {\n    this.messageCallback = callback;\n    if (this.socket) {\n      this.socket.addEventListener('message', callback);\n    }\n  }\n}\n"]}