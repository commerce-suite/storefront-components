{"version":3,"file":"launch-mode.spec.js","sourceRoot":"","sources":["../../../../src/components/launch-mode/test/launch-mode.spec.tsx"],"names":[],"mappings":"AAAA,MAAM,iBAAiB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;AACpC,MAAM,oBAAoB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;AAEvC,IAAI,CAAC,IAAI,CAAC,0BAA0B,EAAE,GAAG,EAAE;IACzC,OAAO;QACL,iBAAiB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,CAAC;YACrD,aAAa,EAAE,iBAAiB;YAChC,gBAAgB,EAAE,oBAAoB;SACvC,CAAC,CAAC;KACJ,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAC5C,OAAO,EAAE,cAAc,EAAE,MAAM,4BAA4B,CAAC;AAC5D,OAAO,EAAE,iBAAiB,EAAE,MAAM,4BAA4B,CAAC;AAE/D,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,UAAU,CAAC,GAAG,EAAE;QACd,iBAAiB,CAAC,SAAS,EAAE,CAAC;QAC9B,oBAAoB,CAAC,SAAS,EAAE,CAAC;QACjC,iBAAiB,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;QAEvD,MAAM,CAAC,QAAQ,GAAG,MAAM,QAAQ;YAAd;gBAChB,SAAI,GAAG,EAAE,CAAC;YAIZ,CAAC;YAHC,MAAM,CAAC,IAAI,EAAE,KAAK;gBAChB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;YAC1B,CAAC;SACK,CAAC;IACX,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+DAA+D,EAAE,KAAK,IAAI,EAAE;QAC7E,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,UAAU,CAAC;YACxB,IAAI,EAAE,6BAA6B;SACpC,CAAC,CAAC;QAEH,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5B,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC7C,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,wBAAwB,CAAC,CAAC;QACxE,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,CAAC;QAEtE,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;QACxD,MAAM,CAAC,aAAa,CAAC,CAAC,UAAU,EAAE,CAAC;QACnC,MAAM,CAAC,aAAa,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC5D,MAAM,CAAC,YAAY,CAAC,CAAC,UAAU,EAAE,CAAC;QAClC,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;QAC/D,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,UAAU,CAAC;YACxB,IAAI,EAAE,6BAA6B;SACpC,CAAC,CAAC;QAEH,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5B,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAC/C,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC;QACrB,KAAK,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;QACxC,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5B,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACjD,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;QAC9D,oBAAoB,CAAC,iBAAiB,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;QAErD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,UAAU,CAAC;YACxB,IAAI,EAAE,6BAA6B;SACpC,CAAC,CAAC;QAEH,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5B,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,EAAE,QAAQ,EAAE,qBAAqB,EAAS,CAAC;QAE5D,MAAM,YAAY,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;QAClC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,EAAE;YAC1C,KAAK,EAAE,YAAY;YACnB,QAAQ,EAAE,IAAI;SACf,CAAC,CAAC;QAEH,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAC/C,KAAK,CAAC,KAAK,GAAG,SAAS,CAAC;QACxB,KAAK,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;QACxC,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5B,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAC7C,IAAI,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,QAAQ,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QAC7E,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5B,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2DAA2D,EAAE,KAAK,IAAI,EAAE;QACzE,MAAM,KAAK,GAAG,EAAE,IAAI,EAAE,kBAAkB,EAAE,CAAC;QAC3C,oBAAoB,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAEzE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,UAAU,CAAC;YACxB,IAAI,EAAE,6BAA6B;SACpC,CAAC,CAAC;QAEH,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5B,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAC/C,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC;QACtB,KAAK,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;QACxC,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5B,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAC7C,IAAI,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,QAAQ,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QAC7E,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5B,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,yCAAyC,CAAC,CAAC;QACnF,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;IACpE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;QACtE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,UAAU,CAAC;YACxB,IAAI,EAAE,6BAA6B;SACpC,CAAC,CAAC;QAEH,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5B,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,wBAAwB,CAAqB,CAAC;QAC5F,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAsB,CAAC;QAE1F,MAAM,CAAC,aAAa,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC5D,MAAM,CAAC,YAAY,CAAC,CAAC,UAAU,EAAE,CAAC;QAElC,YAAY,CAAC,KAAK,EAAE,CAAC;QACrB,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5B,MAAM,CAAC,aAAa,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxD,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAEtE,YAAY,CAAC,KAAK,EAAE,CAAC;QACrB,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5B,MAAM,CAAC,aAAa,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC5D,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IACxE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;QACvE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,UAAU,CAAC;YACxB,IAAI,EAAE,6BAA6B;SACpC,CAAC,CAAC;QAEH,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5B,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,CAAC;QAErE,IAAI,GAAG,GAAG,YAAY,CAAC,aAAa,CAAC,KAAK,CAAqB,CAAC;QAChE,MAAM,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,CAAC;QACzB,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACrC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;QAE5C,YAAkC,CAAC,KAAK,EAAE,CAAC;QAC5C,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5B,GAAG,GAAG,YAAY,CAAC,aAAa,CAAC,KAAK,CAAqB,CAAC;QAC5D,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["const getAppContentMock = jest.fn();\nconst validatePasswordMock = jest.fn();\n\njest.mock('./../launch-mode.service', () => {\n  return {\n    LaunchModeService: jest.fn().mockImplementation(() => ({\n      getAppContent: getAppContentMock,\n      validatePassword: validatePasswordMock,\n    })),\n  };\n});\n\nimport { newSpecPage } from '@stencil/core/testing';\nimport { LaunchMode } from '../launch-mode';\nimport { ERROR_MESSAGES } from '../constants/errorMessages';\nimport { launchModeContent } from '../mocks/launchModeContent';\n\ndescribe('launch-mode', () => {\n  beforeEach(() => {\n    getAppContentMock.mockReset();\n    validatePasswordMock.mockReset();\n    getAppContentMock.mockResolvedValue(launchModeContent);\n\n    global.FormData = class FormData {\n      data = {};\n      append(name, value) {\n        this.data[name] = value;\n      }\n    } as any;\n  });\n\n  it('renders loading initially and then renders content after load', async () => {\n    const page = await newSpecPage({\n      components: [LaunchMode],\n      html: `<launch-mode></launch-mode>`,\n    });\n\n    await page.waitForChanges();\n\n    const title = page.root.querySelector('.h1');\n    const passwordInput = page.root.querySelector('input[name=\"password\"]');\n    const submitButton = page.root.querySelector('button[type=\"submit\"]');\n\n    expect(title.textContent).toBe(launchModeContent.title);\n    expect(passwordInput).toBeTruthy();\n    expect(passwordInput.getAttribute('type')).toBe('password');\n    expect(submitButton).toBeTruthy();\n    expect(submitButton.hasAttribute('disabled')).toBe(true);\n  });\n\n  it('enables submit button when password is provided', async () => {\n    const page = await newSpecPage({\n      components: [LaunchMode],\n      html: `<launch-mode></launch-mode>`,\n    });\n\n    await page.waitForChanges();\n\n    const input = page.root.querySelector('input');\n    input.value = '1234';\n    input.dispatchEvent(new Event('input'));\n    await page.waitForChanges();\n\n    const submit = page.root.querySelector('button');\n    expect(submit.hasAttribute('disabled')).toBe(false);\n  });\n\n  it('navigates to base_url on successful validation', async () => {\n    validatePasswordMock.mockResolvedValue({ ok: true });\n\n    const page = await newSpecPage({\n      components: [LaunchMode],\n      html: `<launch-mode></launch-mode>`,\n    });\n\n    await page.waitForChanges();\n\n    page.win.dooca = { base_url: 'https://example.com' } as any;\n\n    const mockLocation = { href: '' };\n    Object.defineProperty(page.win, 'location', {\n      value: mockLocation,\n      writable: true,\n    });\n\n    const input = page.root.querySelector('input');\n    input.value = 'letmein';\n    input.dispatchEvent(new Event('input'));\n    await page.waitForChanges();\n\n    const form = page.root.querySelector('form');\n    form.dispatchEvent(new Event('submit', { bubbles: true, cancelable: true }));\n    await page.waitForChanges();\n\n    expect(mockLocation.href).toBe('https://example.com');\n  });\n\n  it('shows error message when validation fails with known code', async () => {\n    const error = { code: 'invalid_password' };\n    validatePasswordMock.mockRejectedValue(new Error(JSON.stringify(error)));\n\n    const page = await newSpecPage({\n      components: [LaunchMode],\n      html: `<launch-mode></launch-mode>`,\n    });\n\n    await page.waitForChanges();\n\n    const input = page.root.querySelector('input');\n    input.value = 'wrong';\n    input.dispatchEvent(new Event('input'));\n    await page.waitForChanges();\n\n    const form = page.root.querySelector('form');\n    form.dispatchEvent(new Event('submit', { bubbles: true, cancelable: true }));\n    await page.waitForChanges();\n\n    const message = page.root.querySelector('.launch-mode-content-message-error span');\n    expect(message.textContent).toBe(ERROR_MESSAGES.invalid_password);\n  });\n\n  it('toggles password visibility when eye button is clicked', async () => {\n    const page = await newSpecPage({\n      components: [LaunchMode],\n      html: `<launch-mode></launch-mode>`,\n    });\n\n    await page.waitForChanges();\n\n    const passwordInput = page.root.querySelector('input[name=\"password\"]') as HTMLInputElement;\n    const toggleButton = page.root.querySelector('.password-toggle-btn') as HTMLButtonElement;\n\n    expect(passwordInput.getAttribute('type')).toBe('password');\n    expect(toggleButton).toBeTruthy();\n\n    toggleButton.click();\n    await page.waitForChanges();\n\n    expect(passwordInput.getAttribute('type')).toBe('text');\n    expect(toggleButton.getAttribute('aria-label')).toBe('Ocultar senha');\n\n    toggleButton.click();\n    await page.waitForChanges();\n\n    expect(passwordInput.getAttribute('type')).toBe('password');\n    expect(toggleButton.getAttribute('aria-label')).toBe('Mostrar senha');\n  });\n\n  it('renders correct icon based on password visibility state', async () => {\n    const page = await newSpecPage({\n      components: [LaunchMode],\n      html: `<launch-mode></launch-mode>`,\n    });\n\n    await page.waitForChanges();\n\n    const toggleButton = page.root.querySelector('.password-toggle-btn');\n\n    let img = toggleButton.querySelector('img') as HTMLImageElement;\n    expect(img).toBeTruthy();\n    expect(img.src).toContain('eye.svg');\n    expect(img.src).not.toContain('eye-off.svg');\n\n    (toggleButton as HTMLButtonElement).click();\n    await page.waitForChanges();\n\n    img = toggleButton.querySelector('img') as HTMLImageElement;\n    expect(img.src).toContain('eye-off.svg');\n  });\n});\n"]}