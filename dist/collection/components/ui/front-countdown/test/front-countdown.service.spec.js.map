{"version":3,"file":"front-countdown.service.spec.js","sourceRoot":"","sources":["../../../../../../src/components/ui/front-countdown/test/front-countdown.service.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { FrontCountdownService } from '../front-countdown.service';\n\ndescribe('launch-countdown service', () => {\n  let service: FrontCountdownService;\n\n  afterEach(() => {\n    if (service) service.stopCountdown();\n  });\n\n  it('should return a error when try initiate the service with invalid dates', () => {\n    const invalidDate = new Date('invalid date');\n    const validDate = new Date('2022-12-31T23:59:59.999Z');\n\n    expect(() => {\n      service = new FrontCountdownService(invalidDate, validDate);\n    }).toThrow(new Error('Invalid date'));\n\n    expect(() => {\n      service = new FrontCountdownService(validDate, invalidDate);\n    }).toThrow(new Error('Invalid date'));\n  });\n\n  describe('Function calculateMillisecondsDifference', () => {\n    it('should return the correctly difference between dates in milliseconds', () => {\n      const startDate = new Date('2023-10-05T00:00:00Z');\n      const targetDate = new Date('2023-11-05T00:00:00Z');\n      const expectedResult = 2678400000;\n\n      service = new FrontCountdownService(startDate, targetDate);\n\n      const result = service.getMillisecondsDifference();\n      expect(result).toBe(expectedResult);\n    });\n  });\n\n  describe('Function calculateTimeDifference', () => {\n    it('should return the difference between dates correctly', () => {\n      const startDate = new Date('2023-10-05T00:00:00Z');\n      const targetDate = new Date('2023-10-06T01:01:01Z');\n      const expectedResult = { daysDiff: 1, hoursDiff: 1, minutesDiff: 1, secondsDiff: 1 };\n\n      service = new FrontCountdownService(startDate, targetDate);\n\n      const result = service.getTimeDifference();\n      expect(result.daysDiff).toBe(expectedResult.daysDiff);\n      expect(result.hoursDiff).toBe(expectedResult.hoursDiff);\n      expect(result.minutesDiff).toBe(expectedResult.minutesDiff);\n      expect(result.secondsDiff).toBe(expectedResult.secondsDiff);\n    });\n  });\n\n  describe('Function isCountdownFinished', () => {\n    it('should return true when Countdown was finished', () => {\n      const startDate = new Date('2023-11-05T00:00:00Z');\n      const targetDate = new Date('2023-10-06T01:01:01Z');\n      service = new FrontCountdownService(startDate, targetDate);\n\n      expect(service.isCountdownFinished()).toBe(true);\n    });\n\n    it(\"should return false when Countdown wasn't finished\", () => {\n      const startDate = new Date('2023-10-05T00:00:00Z');\n      const targetDate = new Date('2023-11-06T01:01:01Z');\n      service = new FrontCountdownService(startDate, targetDate);\n\n      expect(service.isCountdownFinished()).toBe(false);\n    });\n  });\n});\n"]}