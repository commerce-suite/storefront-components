{"version":3,"file":"front-countdown.service.js","sourceRoot":"","sources":["../../../../../src/components/ui/front-countdown/front-countdown.service.ts"],"names":[],"mappings":"AAGA,MAAM,OAAO,qBAAqB;IAIhC,YACU,SAAe,EACf,OAAa;QADb,cAAS,GAAT,SAAS,CAAM;QACf,YAAO,GAAP,OAAO,CAAM;QALf,cAAS,GAAG,IAAI,CAAC;QAOvB,IAAI,KAAK,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC;YAC3D,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;QAClC,CAAC;QACD,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAEO,kBAAkB;QACxB,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;IACvE,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC,GAAG,EAAE;YACjC,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAE1B,IAAI,IAAI,CAAC,mBAAmB,EAAE,EAAE,CAAC;gBAC/B,IAAI,CAAC,aAAa,EAAE,CAAC;YACvB,CAAC;QACH,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IACrB,CAAC;IAED,aAAa;QACX,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACjC,CAAC;IAED,yBAAyB;QACvB,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;IAC3D,CAAC;IAED,mBAAmB;QACjB,MAAM,IAAI,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;QAC9C,OAAO,IAAI,IAAI,CAAC,CAAC;IACnB,CAAC;IAED,iBAAiB;QACf,MAAM,IAAI,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;QAE9C,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;QAC1D,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,GAAG,CAAC,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;QAChF,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,GAAG,CAAC,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC;QACxE,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;QAE5D,OAAO;YACL,QAAQ;YACR,SAAS;YACT,WAAW;YACX,WAAW;SACZ,CAAC;IACJ,CAAC;CACF","sourcesContent":["import type { ICountdownService } from './ICountdownService';\nimport type { DateDifferenceType } from './front-countdown.type';\n\nexport class FrontCountdownService implements ICountdownService {\n  private oneSecond = 1000;\n  private intervalId: ReturnType<typeof setInterval>;\n\n  constructor(\n    private startDate: Date,\n    private endDate: Date,\n  ) {\n    if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {\n      throw new Error('Invalid date');\n    }\n    this.startCountdown();\n  }\n\n  private incrementOneSecond(): void {\n    this.startDate = new Date(this.startDate.getTime() + this.oneSecond);\n  }\n\n  startCountdown(): void {\n    this.intervalId = setInterval(() => {\n      this.incrementOneSecond();\n\n      if (this.isCountdownFinished()) {\n        this.stopCountdown();\n      }\n    }, this.oneSecond);\n  }\n\n  stopCountdown(): void {\n    clearInterval(this.intervalId);\n  }\n\n  getMillisecondsDifference(): number {\n    return this.endDate.getTime() - this.startDate.getTime();\n  }\n\n  isCountdownFinished(): boolean {\n    const diff = this.getMillisecondsDifference();\n    return diff <= 0;\n  }\n\n  getTimeDifference(): DateDifferenceType {\n    const diff = this.getMillisecondsDifference();\n\n    const daysDiff = Math.floor(diff / (1000 * 60 * 60 * 24));\n    const hoursDiff = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    const minutesDiff = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n    const secondsDiff = Math.floor((diff % (1000 * 60)) / 1000);\n\n    return {\n      daysDiff,\n      hoursDiff,\n      minutesDiff,\n      secondsDiff,\n    };\n  }\n}\n"]}