{"version":3,"file":"color-selector.spec.js","sourceRoot":"","sources":["../../../../../src/components/ui/color-selector/test/color-selector.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { h } from '@stencil/core';\nimport { newSpecPage } from '@stencil/core/testing';\nimport { ColorSelector } from '../color-selector';\nimport { colors, colorsWithImage } from '../mocks/colorsMocks';\n\ndescribe('color-selector', () => {\n  it('should render color-selector without any props', async () => {\n    const page = await newSpecPage({\n      components: [ColorSelector],\n      html: `<color-selector></color-selector>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <color-selector>\n        <div class=\"color-selector\"></div>\n      </color-selector>\n    `);\n  });\n\n  it('should render color-selector with colors', async () => {\n    const page = await newSpecPage({\n      components: [ColorSelector],\n      template: () => <color-selector colors={colors}></color-selector>,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <color-selector>\n        <div class=\"color-selector\">\n          <button aria-label=\"Vermelho\" class=\"color-option\" title=\"Vermelho\">\n            <span class=\"color-dot\" style=\"background-color: #FF0000;\"></span>\n          </button>\n          <button aria-label=\"Azul\" class=\"color-option\" title=\"Azul\">\n            <span class=\"color-dot\" style=\"background-color: #0000FF;\"></span>\n          </button>\n          <button aria-label=\"Estampado\" class=\"color-option\" title=\"Estampado\">\n            <span class=\"color-dot\" style=\"background-image: url(https://example.com/pattern.jpg); background-size: cover; background-position: center;\"></span>\n          </button>\n        </div>\n      </color-selector>\n    `);\n  });\n\n  it('should render color-selector with selected color', async () => {\n    const page = await newSpecPage({\n      components: [ColorSelector],\n      template: () => <color-selector colors={colors} selectedId={2}></color-selector>,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <color-selector>\n        <div class=\"color-selector\">\n          <button aria-label=\"Vermelho\" class=\"color-option\" title=\"Vermelho\">\n            <span class=\"color-dot\" style=\"background-color: #FF0000;\"></span>\n          </button>\n          <button aria-label=\"Azul\" class=\"active color-option\" title=\"Azul\">\n            <span class=\"color-dot\" style=\"background-color: #0000FF;\"></span>\n          </button>\n          <button aria-label=\"Estampado\" class=\"color-option\" title=\"Estampado\">\n            <span class=\"color-dot\" style=\"background-image: url(https://example.com/pattern.jpg); background-size: cover; background-position: center;\"></span>\n          </button>\n        </div>\n      </color-selector>\n    `);\n  });\n\n  it('should emit colorSelected event when color is clicked', async () => {\n    const page = await newSpecPage({\n      components: [ColorSelector],\n      template: () => <color-selector colors={colors}></color-selector>,\n    });\n\n    const colorSelectedSpy = jest.fn();\n    page.root.addEventListener('colorSelected', colorSelectedSpy);\n\n    const colorButton = page.root.querySelector('.color-option') as HTMLButtonElement;\n    colorButton.click();\n\n    expect(colorSelectedSpy).toHaveBeenCalledWith(\n      expect.objectContaining({\n        detail: colors[0],\n      }),\n    );\n  });\n\n  it('should handle colors with image background', async () => {\n    const page = await newSpecPage({\n      components: [ColorSelector],\n      template: () => <color-selector colors={colorsWithImage}></color-selector>,\n    });\n\n    const colorDot = page.root.querySelector('.color-dot') as HTMLElement;\n    expect(colorDot.style.backgroundImage).toBe('url(https://example.com/floral.jpg)');\n    expect(colorDot.style.backgroundSize).toBe('cover');\n    expect(colorDot.style.backgroundPosition).toBe('center');\n  });\n});\n"]}