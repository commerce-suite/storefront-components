{"version":3,"file":"product-card.js","sourceRoot":"","sources":["../../../../src/components/ui/product-card/product-card.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAqB,MAAM,eAAe,CAAC;AAEnF,OAAO,EAAE,cAAc,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;AAQvE,MAAM,OAAO,WAAW;;sBACI,KAAK;;;;IAK/B,kBAAkB,CAAC,SAAiB;QAClC,MAAM,YAAY,GAAG,EAAE,SAAS,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC;QAChD,OAAO,GAAG,SAAS,IAAI,eAAe,CAAC,YAAY,CAAC,EAAE,CAAC;IACzD,CAAC;IAED,iBAAiB;;QACf,IAAI,CAAC,aAAa;YAChB,CAAC,CAAC,CAAA,MAAA,IAAI,CAAC,OAAO,0CAAE,SAAS,CAAA,IAAI,CAAC,CAAA,MAAA,IAAI,CAAC,OAAO,0CAAE,SAAS,CAAA,KAAK,CAAC,CAAA,MAAA,IAAI,CAAC,OAAO,0CAAE,KAAK,CAAA,CAAC;IACnF,CAAC;IAED,MAAM;;QACJ,OAAO,CACL,EAAC,IAAI;YACH,4DAAK,KAAK,EAAE,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC;gBACtD,oEACE,KAAK,EAAE,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,EACvC,QAAQ,EAAE,MAAA,MAAA,IAAI,CAAC,OAAO,0CAAE,KAAK,0CAAE,GAAG,EAClC,OAAO,EAAE,CAAA,MAAA,MAAA,IAAI,CAAC,OAAO,0CAAE,KAAK,0CAAE,GAAG,KAAI,mBAAmB,GAC3C;gBACf,4DAAK,KAAK,EAAC,MAAM;oBACf,6DAAM,KAAK,EAAC,OAAO,IAAE,MAAA,IAAI,CAAC,OAAO,0CAAE,IAAI,CAAQ;oBAC/C,4DAAK,KAAK,EAAC,OAAO;wBACf,IAAI,CAAC,aAAa,IAAI,CACrB,6DAAM,KAAK,EAAC,MAAM,IAAE,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAQ,CACnE;wBACD,6DAAM,KAAK,EAAC,SAAS,IAAE,cAAc,CAAC,MAAA,IAAI,CAAC,OAAO,0CAAE,KAAK,CAAC,CAAQ,CAC9D,CACF,CACF,CACD,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Host, Prop, h, State, ComponentWillLoad } from '@stencil/core';\nimport { IProductCard } from './product-card.type';\nimport { currencyFormat, getClassByProps } from '../../../utils/utils';\n\n@Component({\n  tag: 'product-card',\n  styleUrl: 'product-card.scss',\n  shadow: false,\n  scoped: true,\n})\nexport class ProductCard implements ComponentWillLoad {\n  @Prop() inline: boolean = false;\n  @Prop({ mutable: true }) product: IProductCard;\n\n  @State() showPriceBase: boolean;\n\n  getClassWithInline(className: string) {\n    const prosForClass = { '-inline': this.inline };\n    return `${className} ${getClassByProps(prosForClass)}`;\n  }\n\n  componentWillLoad(): void | Promise<void> {\n    this.showPriceBase =\n      !!this.product?.priceBase && +this.product?.priceBase !== +this.product?.price;\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class={this.getClassWithInline('product-container')}>\n          <front-image\n            class={this.getClassWithInline('image')}\n            imageSrc={this.product?.image?.src}\n            textAlt={this.product?.image?.alt || 'Imagem do produto'}\n          ></front-image>\n          <div class=\"info\">\n            <span class=\"title\">{this.product?.name}</span>\n            <div class=\"price\">\n              {this.showPriceBase && (\n                <span class=\"base\">{currencyFormat(this.product.priceBase)}</span>\n              )}\n              <span class=\"current\">{currencyFormat(this.product?.price)}</span>\n            </div>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"]}