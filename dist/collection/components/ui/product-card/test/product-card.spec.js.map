{"version":3,"file":"product-card.spec.js","sourceRoot":"","sources":["../../../../../src/components/ui/product-card/test/product-card.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAClC,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAC;AAE9C,OAAO,EAAE,OAAO,EAAE,uBAAuB,EAAE,MAAM,4BAA4B,CAAC;AAE9E,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,EAAE,CAAC,SAAS,EAAE,KAAK,IAAI,EAAE;QACvB,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,WAAW,CAAC;YACzB,QAAQ,EAAE,GAAG,EAAE,CAAC,oBAAc,OAAO,EAAE,OAAO,GAAiB;SAChE,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;+CAGa,OAAO,CAAC,KAAK,CAAC,GAAG;;;;;;;;;;;;;;;;KAgB3D,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qBAAqB,EAAE,KAAK,IAAI,EAAE;QACnC,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,WAAW,CAAC;YACzB,QAAQ,EAAE,GAAG,EAAE,CAAC,oBAAc,MAAM,QAAC,OAAO,EAAE,OAAO,GAAiB;SACvE,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;uDAGqB,OAAO,CAAC,KAAK,CAAC,GAAG;;;;;;;;;;;;;;;;KAgBnE,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;QACzC,MAAM,uBAAuB,mCAAsB,OAAO,KAAE,SAAS,EAAE,IAAI,GAAE,CAAC;QAC9E,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,WAAW,CAAC;YACzB,QAAQ,EAAE,GAAG,EAAE,CAAC,oBAAc,MAAM,QAAC,OAAO,EAAE,uBAAuB,GAAiB;SACvF,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;uDAGqB,OAAO,CAAC,KAAK,CAAC,GAAG;;;;;;;;;;;;;KAanE,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;QACzC,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,WAAW,CAAC;YACzB,QAAQ,EAAE,GAAG,EAAE,CAAC,oBAAc,OAAO,EAAE,uBAAuB,GAAiB;SAChF,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;+CAGa,OAAO,CAAC,KAAK,CAAC,GAAG;;;;;;;;;;;;;;;;KAgB3D,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { h } from '@stencil/core';\nimport { newSpecPage } from '@stencil/core/testing';\nimport { ProductCard } from '../product-card';\nimport { IProductCard } from '../product-card.type';\nimport { product, productWithSpecialPrice } from '../mocks/product-card.mock';\n\ndescribe('product-card', () => {\n  it('renders', async () => {\n    const page = await newSpecPage({\n      components: [ProductCard],\n      template: () => <product-card product={product}></product-card>,\n    });\n    expect(page.root).toEqualHtml(`\n    <product-card>\n      <div class=\"product-container\">\n        <front-image class=\"image\" imagesrc=\"${product.image.src}\" textalt=\"Imagem do produto\"></front-image>\n        <div class=\"info\">\n          <span class=\"title\">\n            Bolsa Essencial\n          </span>\n          <div class=\"price\">\n            <span class=\"base\">\n              R$&nbsp;499,99\n            </span>\n            <span class=\"current\">\n              R$&nbsp;389,90\n            </span>\n          </div>\n        </div>\n      </div>\n     </product-card>\n    `);\n  });\n\n  it('renders with inline', async () => {\n    const page = await newSpecPage({\n      components: [ProductCard],\n      template: () => <product-card inline product={product}></product-card>,\n    });\n    expect(page.root).toEqualHtml(`\n    <product-card>\n      <div class=\"-inline  product-container\">\n        <front-image class=\"-inline image\" imagesrc=\"${product.image.src}\" textalt=\"Imagem do produto\"></front-image>\n        <div class=\"info\">\n          <span class=\"title\">\n            Bolsa Essencial\n          </span>\n          <div class=\"price\">\n            <span class=\"base\">\n              R$&nbsp;499,99\n            </span>\n            <span class=\"current\">\n              R$&nbsp;389,90\n            </span>\n          </div>\n        </div>\n      </div>\n     </product-card>\n    `);\n  });\n\n  it('renders without priceBase', async () => {\n    const productWithoutPriceBase: IProductCard = { ...product, priceBase: null };\n    const page = await newSpecPage({\n      components: [ProductCard],\n      template: () => <product-card inline product={productWithoutPriceBase}></product-card>,\n    });\n    expect(page.root).toEqualHtml(`\n    <product-card>\n      <div class=\"-inline  product-container\">\n        <front-image class=\"-inline image\" imagesrc=\"${product.image.src}\" textalt=\"Imagem do produto\"></front-image>\n        <div class=\"info\">\n          <span class=\"title\">\n            Bolsa Essencial\n          </span>\n          <div class=\"price\">\n            <span class=\"current\">\n              R$&nbsp;389,90\n            </span>\n          </div>\n        </div>\n      </div>\n     </product-card>\n    `);\n  });\n\n  it('renders with specialPrice', async () => {\n    const page = await newSpecPage({\n      components: [ProductCard],\n      template: () => <product-card product={productWithSpecialPrice}></product-card>,\n    });\n    expect(page.root).toEqualHtml(`\n    <product-card>\n      <div class=\"product-container\">\n        <front-image class=\"image\" imagesrc=\"${product.image.src}\" textalt=\"Imagem do produto\"></front-image>\n        <div class=\"info\">\n          <span class=\"title\">\n            Bolsa Essencial\n          </span>\n          <div class=\"price\">\n            <span class=\"base\">\n              R$&nbsp;499,99\n            </span>\n            <span class=\"current\">\n              R$&nbsp;299,90 no pix\n            </span>\n          </div>\n        </div>\n      </div>\n     </product-card>\n    `);\n  });\n});\n"]}