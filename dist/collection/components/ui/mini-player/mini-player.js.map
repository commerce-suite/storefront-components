{"version":3,"file":"mini-player.js","sourceRoot":"","sources":["../../../../src/components/ui/mini-player/mini-player.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAgB,CAAC,EAAE,YAAY,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AACnG,OAAO,EAAE,gBAAgB,EAAE,MAAM,6BAA6B,CAAC;AAO/D,MAAM,OAAO,UAAU;;QA2Bb,oBAAe,GAAG,CAAC,KAA8B,EAAE,EAAE;YAC3D,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAC9E,CAAC,CAAC;;wBA3B0B,KAAK;yBACL,mBAAmB;0BAClB,QAAQ;8BAEF,IAAI;yBACV,CAAC;yBACD,CAAC;0BACC,KAAK;;IAOpC,iBAAiB;QACf,IAAI,CAAC,eAAe,GAAG,IAAI,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YACnD,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;YACnB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,eAAe,CAAC,iBAAiB,GAAG,CAAC,UAAmB,EAAE,EAAE;YAC/D,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC/B,CAAC,CAAC;IACJ,CAAC;IAMO,qBAAqB;QAC3B,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;IAC9B,CAAC;IAEO,kBAAkB;QACxB,OAAO;YACL,SAAS,EAAE,aAAa,IAAI,CAAC,SAAS,OAAO,IAAI,CAAC,SAAS,KAAK;SACjE,CAAC;IACJ,CAAC;IAEO,qBAAqB;QAC3B,OAAO;YACL,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM;SAC9C,CAAC;IACJ,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;IAChC,CAAC;IAED,MAAM;QACJ,OAAO,CACL,EAAC,IAAI,uDACF,IAAI,CAAC,cAAc,IAAI,CACtB,4DAAK,KAAK,EAAC,aAAa,EAAC,KAAK,EAAE,IAAI,CAAC,kBAAkB,EAAE;YACvD,+DAAQ,KAAK,EAAC,0BAA0B,EAAC,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,qBAAqB,EAAE;gBAClF,4DAAK,GAAG,EAAE,YAAY,CAAC,+BAA+B,CAAC,EAAE,GAAG,EAAC,YAAY,GAAG,CACrE;YACT,0EAAmB,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,GAAI;YACrE,4DACE,KAAK,EAAC,iBAAiB,EACvB,KAAK,EAAE,IAAI,CAAC,qBAAqB,EAAE,EACnC,WAAW,EAAE,IAAI,CAAC,eAAe,EACjC,YAAY,EAAE,IAAI,CAAC,eAAe;gBAElC,2DAAI,KAAK,EAAC,uBAAuB,IAAE,IAAI,CAAC,SAAS,CAAM;gBACvD,4DAAK,KAAK,EAAC,wBAAwB;oBACjC,+DAAQ,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,IAAG,IAAI,CAAC,UAAU,CAAU,CACxE,CACF,CACF,CACP,CACI,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Prop, Event, Host, EventEmitter, h, getAssetPath, State } from '@stencil/core';\nimport { DraggableService } from './services/DraggableService';\n\n@Component({\n  tag: 'mini-player',\n  styleUrl: 'mini-player.scss',\n  shadow: false,\n})\nexport class MiniPlayer {\n  @Prop() videoId: string;\n  @Prop() autoPlay: boolean = false;\n  @Prop() mainTitle: string = 'Mini Player Title';\n  @Prop() buttonText: string = 'Return';\n\n  @State() showMiniPlayer: boolean = true;\n  @State() positionX: number = 0;\n  @State() positionY: number = 0;\n  @State() isDragging: boolean = false;\n\n  @Event() componentRendered: EventEmitter<void>;\n  @Event({ bubbles: true, eventName: 'on-click-button' }) onClickButton: EventEmitter<void>;\n\n  private dragDropService: DraggableService;\n\n  componentWillLoad() {\n    this.dragDropService = new DraggableService((x, y) => {\n      this.positionX = x;\n      this.positionY = y;\n    });\n\n    this.dragDropService.onDragStateChange = (isDragging: boolean) => {\n      this.isDragging = isDragging;\n    };\n  }\n\n  private handleDragStart = (event: MouseEvent | TouchEvent) => {\n    this.dragDropService.handleDragStart(event, this.positionX, this.positionY);\n  };\n\n  private handleCloseMiniPlayer() {\n    this.showMiniPlayer = false;\n  }\n\n  private getMiniPlayerStyle() {\n    return {\n      transform: `translate(${this.positionX}px, ${this.positionY}px)`,\n    };\n  }\n\n  private getMiniPlayerBarStyle() {\n    return {\n      cursor: this.isDragging ? 'grabbing' : 'grab',\n    };\n  }\n\n  componentDidLoad() {\n    this.componentRendered.emit();\n  }\n\n  render() {\n    return (\n      <Host>\n        {this.showMiniPlayer && (\n          <div class=\"mini-player\" style={this.getMiniPlayerStyle()}>\n            <button class=\"mini-player-close-button\" onClick={() => this.handleCloseMiniPlayer()}>\n              <img src={getAssetPath('./assets/icons/close-icon.svg')} alt=\"close-icon\" />\n            </button>\n            <live-video-player videoId={this.videoId} autoPlay={this.autoPlay} />\n            <div\n              class=\"mini-player-bar\"\n              style={this.getMiniPlayerBarStyle()}\n              onMouseDown={this.handleDragStart}\n              onTouchStart={this.handleDragStart}\n            >\n              <h6 class=\"mini-player-bar-title\">{this.mainTitle}</h6>\n              <div class=\"mini-player-bar-button\">\n                <button onClick={() => this.onClickButton.emit()}>{this.buttonText}</button>\n              </div>\n            </div>\n          </div>\n        )}\n      </Host>\n    );\n  }\n}\n"]}