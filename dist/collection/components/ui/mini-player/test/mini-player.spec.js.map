{"version":3,"file":"mini-player.spec.js","sourceRoot":"","sources":["../../../../../src/components/ui/mini-player/test/mini-player.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAE5C,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;QAC3D,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,EAAE;YACd,IAAI,EAAE,6BAA6B;SACpC,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;KAE7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;QAChE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,UAAU,CAAC;YACxB,IAAI,EAAE,oDAAoD;SAC3D,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;KAkB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;QAC9E,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,UAAU,CAAC;YACxB,IAAI,EAAE,mEAAmE;SAC1E,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;KAkB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;QACzD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,UAAU,CAAC;YACxB,IAAI,EAAE,4EAA4E;SACnF,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;KAkB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;QAC/D,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,UAAU,CAAC;YACxB,IAAI,EAAE,8EAA8E;SACrF,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;KAkB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { MiniPlayer } from '../mini-player';\n\ndescribe('mini-player', () => {\n  it('should render mini-player without any props', async () => {\n    const page = await newSpecPage({\n      components: [],\n      html: `<mini-player></mini-player>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <mini-player></mini-player>\n    `);\n  });\n\n  it('should display the mini-player with the video id', async () => {\n    const page = await newSpecPage({\n      components: [MiniPlayer],\n      html: `<mini-player video-id=\"h5iOu3zAj-Q\"></mini-player>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <mini-player video-id=\"h5iOu3zAj-Q\">\n          <div class=\"mini-player\" style=\"transform: translate(0px, 0px);\">\n            <button class=\"mini-player-close-button\">\n              <img alt=\"close-icon\" src=\"/assets/icons/close-icon.svg\">\n            </button>\n         <live-video-player videoid=\"h5iOu3zAj-Q\"></live-video-player>\n         <div class=\"mini-player-bar\" style=\"cursor: grab;\">\n           <h6 class=\"mini-player-bar-title\">\n             Mini Player Title\n           </h6>\n           <div class=\"mini-player-bar-button\">\n             <button>\n               Return\n             </button>\n           </div>\n         </div>\n      </mini-player>\n    `);\n  });\n\n  it('should display the mini-player with the video id and auto play', async () => {\n    const page = await newSpecPage({\n      components: [MiniPlayer],\n      html: `<mini-player video-id=\"h5iOu3zAj-Q\" auto-play=true></mini-player>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <mini-player video-id=\"h5iOu3zAj-Q\" auto-play=true>\n          <div class=\"mini-player\" style=\"transform: translate(0px, 0px);\">\n            <button class=\"mini-player-close-button\">\n              <img alt=\"close-icon\" src=\"/assets/icons/close-icon.svg\">\n            </button>\n         <live-video-player videoid=\"h5iOu3zAj-Q\" autoplay=\"\"></live-video-player>\n         <div class=\"mini-player-bar\" style=\"cursor: grab;\">\n           <h6 class=\"mini-player-bar-title\">\n             Mini Player Title\n           </h6>\n           <div class=\"mini-player-bar-button\">\n             <button>\n               Return\n             </button>\n           </div>\n         </div>\n      </mini-player>\n    `);\n  });\n\n  it('should display the mini-player with title', async () => {\n    const page = await newSpecPage({\n      components: [MiniPlayer],\n      html: `<mini-player video-id=\"h5iOu3zAj-Q\" main-title=\"Live Title\"></mini-player>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <mini-player video-id=\"h5iOu3zAj-Q\" main-title=\"Live Title\">\n          <div class=\"mini-player\" style=\"transform: translate(0px, 0px);\">\n            <button class=\"mini-player-close-button\">\n              <img alt=\"close-icon\" src=\"/assets/icons/close-icon.svg\">\n            </button>\n         <live-video-player videoid=\"h5iOu3zAj-Q\"></live-video-player>\n         <div class=\"mini-player-bar\" style=\"cursor: grab;\">\n           <h6 class=\"mini-player-bar-title\">\n             Live Title\n           </h6>\n           <div class=\"mini-player-bar-button\">\n             <button>\n               Return\n             </button>\n           </div>\n         </div>\n      </mini-player>\n    `);\n  });\n\n  it('should display the mini-player with button text', async () => {\n    const page = await newSpecPage({\n      components: [MiniPlayer],\n      html: `<mini-player video-id=\"h5iOu3zAj-Q\" button-text=\"Back Button\"></mini-player>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <mini-player video-id=\"h5iOu3zAj-Q\" button-text=\"Back Button\">\n          <div class=\"mini-player\" style=\"transform: translate(0px, 0px);\">\n            <button class=\"mini-player-close-button\">\n              <img alt=\"close-icon\" src=\"/assets/icons/close-icon.svg\">\n            </button>\n         <live-video-player videoid=\"h5iOu3zAj-Q\"></live-video-player>\n         <div class=\"mini-player-bar\" style=\"cursor: grab;\">\n           <h6 class=\"mini-player-bar-title\">\n             Mini Player Title\n           </h6>\n           <div class=\"mini-player-bar-button\">\n             <button>\n               Back Button\n             </button>\n           </div>\n         </div>\n      </mini-player>\n    `);\n  });\n});\n"]}