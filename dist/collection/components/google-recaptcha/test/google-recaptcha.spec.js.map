{"version":3,"file":"google-recaptcha.spec.js","sourceRoot":"","sources":["../../../../src/components/google-recaptcha/test/google-recaptcha.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { GoogleRecaptcha } from '../google-recaptcha';\n\ndescribe('google-recaptcha', () => {\n  beforeEach(() => {\n    global.window = global.window || ({} as Window & typeof globalThis);\n    window.grecaptcha = undefined;\n    window.onRecaptchaLoad = undefined;\n  });\n\n  it('should render google-recaptcha without any props', async () => {\n    const page = await newSpecPage({\n      components: [GoogleRecaptcha],\n      html: `<google-recaptcha></google-recaptcha>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <google-recaptcha>\n        <div class=\"g-recaptcha\" id=\"recaptcha-${\n          page.rootInstance.recaptchaId.split('-')[1]\n        }\"></div>\n      </google-recaptcha>\n    `);\n  });\n\n  it('should render google-recaptcha with site key', async () => {\n    const page = await newSpecPage({\n      components: [GoogleRecaptcha],\n      html: `<google-recaptcha site-key=\"test-site-key\"></google-recaptcha>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <google-recaptcha site-key=\"test-site-key\">\n        <div class=\"g-recaptcha\" id=\"recaptcha-${\n          page.rootInstance.recaptchaId.split('-')[1]\n        }\"></div>\n      </google-recaptcha>\n    `);\n\n    expect(page.rootInstance.siteKey).toBe('test-site-key');\n  });\n\n  it('should generate valid recaptcha id format', async () => {\n    const page = await newSpecPage({\n      components: [GoogleRecaptcha],\n      html: `<google-recaptcha></google-recaptcha>`,\n    });\n\n    expect(page.rootInstance.recaptchaId).toMatch(/^recaptcha-\\d+$/);\n\n    expect(page.rootInstance.recaptchaId).toMatch(/^recaptcha-/);\n\n    const timestamp = page.rootInstance.recaptchaId.replace('recaptcha-', '');\n    expect(parseInt(timestamp)).toBeGreaterThan(0);\n  });\n\n  it('should load recaptcha script when componentDidLoad is called', async () => {\n    const page = await newSpecPage({\n      components: [GoogleRecaptcha],\n      html: `<google-recaptcha site-key=\"test-key\"></google-recaptcha>`,\n    });\n\n    const createElementSpy = jest.spyOn(document, 'createElement');\n    const appendChildSpy = jest.spyOn(document.body, 'appendChild');\n\n    page.rootInstance.componentDidLoad();\n\n    expect(createElementSpy).toHaveBeenCalledWith('script');\n    expect(appendChildSpy).toHaveBeenCalled();\n  });\n\n  it('should emit token when recaptcha callback is triggered', async () => {\n    const page = await newSpecPage({\n      components: [GoogleRecaptcha],\n      html: `<google-recaptcha site-key=\"test-key\"></google-recaptcha>`,\n    });\n\n    window.grecaptcha = {\n      render: jest.fn((_, options) => {\n        options.callback('test-token');\n      }),\n    };\n\n    const tokenSpy = jest.fn();\n    page.root.addEventListener('tokenReceived', tokenSpy);\n\n    page.rootInstance.renderRecaptcha();\n\n    expect(tokenSpy).toHaveBeenCalledWith(\n      expect.objectContaining({\n        detail: 'test-token',\n      }),\n    );\n  });\n});\n"]}