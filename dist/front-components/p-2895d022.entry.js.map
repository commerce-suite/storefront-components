{"version":3,"names":["defaultContent","title","caption","password","is_active","color_title","color_button","color_caption","LaunchModeService","getAppContent","content","AppService","getBySlug","JSON","parse","error","console","validatePassword","formData","url","window","dooca","base_url","response","fetch","method","body","ok","json","Error","stringify","ERROR_MESSAGES","invalid_password","inactive_mode","default","launchModeCss","LaunchModeStyle0","LaunchMode","load","this","launchModeData","launchModeService","isInitialLoading","handleSubmit","event","preventDefault","FormData","append","passwordInput","isLoading","baseUrl","location","href","errorCode","parseErrorCode","errorMessage","userMessage","text","parsed","message","code","_a","handlePasswordChange","target","value","togglePasswordVisibility","showPassword","componentDidLoad","componentRendered","emit","render","colorTitle","colorCaption","colorButton","h","Host","key","style","class","innerHTML","onSubmit","e","name","type","placeholder","onInput","required","onClick","src","getAssetPath","alt","disabled","trim"],"sources":["src/components/launch-mode/constants/defaultContent.ts","src/components/launch-mode/launch-mode.service.ts","src/components/launch-mode/constants/errorMessages.ts","src/components/launch-mode/launch-mode.scss?tag=launch-mode","src/components/launch-mode/launch-mode.tsx"],"sourcesContent":["import { ILaunchMode } from './../lauch-mode.type';\n\nexport const defaultContent: ILaunchMode = {\n  title: 'Modo lançamento',\n  caption: '<p>Utilize a senha para acessar a loja.</p>',\n  password: '1234',\n  is_active: false,\n  color_title: '#000000',\n  color_button: '#000000',\n  color_caption: '#222222',\n};\n","import { AppService } from '@uxshop/storefront-core';\nimport { defaultContent } from './constants/defaultContent';\n\nexport class LaunchModeService {\n  public async getAppContent() {\n    try {\n      const { content } = await AppService.getBySlug('modo-lancamento');\n      return JSON.parse(content);\n    } catch (error) {\n      console.error(error);\n      return defaultContent;\n    }\n  }\n\n  public async validatePassword(formData: FormData) {\n    const url = `${window.dooca.base_url}/action/launch-mode/validate`;\n\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(JSON.stringify(error));\n      }\n\n      return response.json();\n    } catch (error) {\n      console.error('LaunchModeService - validatePassword', { error });\n      throw error;\n    }\n  }\n}\n","export const ERROR_MESSAGES = {\n  invalid_password: 'Senha incorreta.',\n  inactive_mode: 'O modo lançamento está inativo no momento.',\n  default: 'Ocorreu um erro, tente novamente mais tarde.',\n} as const;\n\nexport type ErrorCode = keyof typeof ERROR_MESSAGES;\n","@import '../../style/mixins/button';\n@import '../../style/mixins/screen-media';\n@import '../../style/mixins/spinner-loading.scss';\n\nbody {\n  margin: 0;\n}\n\n:host {\n  display: inline-block;\n  width: 100%;\n}\n\n.loading-container {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: transparentize(#000000, 0.5);\n  z-index: 9999;\n\n  .spinner {\n    @include simple-spinner;\n  }\n\n  &.-initial-loading {\n    background-color: transparent;\n    .spinner {\n      @include simple-spinner(#000000);\n    }\n  }\n}\n\n.launch-mode {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  min-height: 100vh;\n\n  &-container {\n    padding: 16px;\n\n    @include for-tablet {\n      padding: 0;\n    }\n  }\n\n  &-content {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 32px;\n    text-align: center;\n    width: 480px;\n\n    &-label {\n      display: flex;\n      flex-direction: column;\n      gap: 8px;\n\n      h1,\n      div {\n        margin: 0;\n      }\n\n      h1 {\n        color: var(--launch-title, #ffffff);\n      }\n\n      div {\n        color: var(--launch-caption, #ffffff);\n      }\n    }\n\n    &-message {\n      display: flex;\n      justify-content: center;\n      padding: 16px;\n      border-radius: 12px;\n      background: #ffffff;\n      border: 1px solid #cccccc66;\n      width: 100%;\n\n      &-error {\n        color: #dc3545;\n      }\n    }\n  }\n\n  &-form {\n    width: 100%;\n    &-content {\n      display: flex;\n      flex-direction: column;\n      gap: 16px;\n\n      @include for-tablet {\n        flex-direction: row;\n      }\n\n      &-input {\n        display: flex;\n        position: relative;\n        width: 100%;\n\n        @include for-tablet {\n          flex: 1;\n        }\n\n        input {\n          padding: 12px 48px 12px 24px;\n          border: 1px solid #e1e5e9;\n          background: #f8f9fa;\n          width: 100%;\n          font-size: 12px;\n\n          &::placeholder {\n            color: #6c757d;\n          }\n\n          &:focus,\n          &:hover {\n            border-color: var(--launch-button-bg, #667eea);\n          }\n\n          &:focus {\n            outline: none;\n            background: #ffffff;\n          }\n        }\n\n        .password-toggle-btn {\n          position: absolute;\n          right: 12px;\n          top: 50%;\n          transform: translateY(-50%);\n          background: transparent;\n          border: none;\n          cursor: pointer;\n          padding: 4px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          transition: color 0.2s ease;\n        }\n      }\n\n      &-button {\n        @include front-button;\n        font-size: 12px;\n        background-color: var(--launch-button-bg, #667eea);\n        padding: 14px 48px;\n\n        @include for-tablet {\n          width: auto;\n          white-space: nowrap;\n        }\n\n        &:disabled {\n          opacity: 0.6;\n          cursor: not-allowed;\n        }\n      }\n    }\n  }\n}\n","import { Component, Event, EventEmitter, h, Host, State, getAssetPath } from '@stencil/core';\nimport { LaunchModeService } from './launch-mode.service';\nimport { ILaunchMode } from './lauch-mode.type';\nimport { defaultContent } from './constants/defaultContent';\nimport { ERROR_MESSAGES, ErrorCode } from './constants/errorMessages';\n\n@Component({\n  tag: 'launch-mode',\n  styleUrl: 'launch-mode.scss',\n  shadow: false,\n})\nexport class LaunchMode {\n  @State() launchModeData: ILaunchMode = defaultContent;\n  @State() launchModeService = new LaunchModeService();\n  @State() isLoading = false;\n  @State() isInitialLoading = true;\n  @State() userMessage: {\n    text: string;\n  };\n\n  @State() passwordInput = '';\n  @State() showPassword = false;\n\n  @Event() componentRendered: EventEmitter<void>;\n\n  private async load() {\n    try {\n      this.launchModeData = await this.launchModeService.getAppContent();\n    } catch (error) {\n      console.error('LaunchMode - load', { error });\n    } finally {\n      this.isInitialLoading = false;\n    }\n  }\n\n  private async handleSubmit(event: Event) {\n    event.preventDefault();\n\n    const formData = new FormData();\n    formData.append('password', this.passwordInput);\n    formData.append('form_type', 'launch_mode');\n\n    try {\n      this.isLoading = true;\n      await this.launchModeService.validatePassword(formData);\n\n      const baseUrl = window.dooca.base_url;\n      window.location.href = baseUrl;\n    } catch (error) {\n      console.error('LaunchMode - handleSubmit', { error });\n\n      const errorCode = this.parseErrorCode(error);\n      const errorMessage = ERROR_MESSAGES[errorCode] || ERROR_MESSAGES.default;\n\n      this.userMessage = {\n        text: errorMessage,\n      };\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  private parseErrorCode(error: any): ErrorCode | null {\n    try {\n      const parsed = JSON.parse(error?.message || '{}');\n      return parsed.code || null;\n    } catch {\n      return null;\n    }\n  }\n\n  private handlePasswordChange(event: Event) {\n    const target = event.target as HTMLInputElement;\n    this.passwordInput = target.value;\n\n    if (this.userMessage) this.userMessage = null;\n  }\n\n  private togglePasswordVisibility() {\n    this.showPassword = !this.showPassword;\n  }\n\n  async componentDidLoad() {\n    await this.load();\n    this.componentRendered.emit();\n  }\n\n  render() {\n    const {\n      title,\n      caption,\n      color_title: colorTitle,\n      color_caption: colorCaption,\n      color_button: colorButton,\n    } = this.launchModeData;\n\n    return (\n      <Host\n        style={{\n          '--launch-title': colorTitle,\n          '--launch-caption': colorCaption,\n          '--launch-button-bg': colorButton,\n        }}\n      >\n        {(this.isLoading || this.isInitialLoading) && (\n          <div class={`loading-container ${this.isInitialLoading ? '-initial-loading' : ''}`}>\n            <span class=\"spinner\" />\n          </div>\n        )}\n\n        {this.launchModeData && !this.isInitialLoading && (\n          <div class=\"launch-mode launch-mode-container\">\n            <div class=\"launch-mode-content\">\n              <div class=\"launch-mode-content-label\">\n                <h1 class=\"h1\">{title}</h1>\n                <div innerHTML={caption} />\n              </div>\n\n              <form onSubmit={e => this.handleSubmit(e)} class=\"launch-mode-form\">\n                <div class=\"launch-mode-form-content\">\n                  <div class=\"launch-mode-form-content-input\">\n                    <input\n                      name=\"password\"\n                      type={this.showPassword ? 'text' : 'password'}\n                      placeholder=\"Digite sua senha\"\n                      value={this.passwordInput}\n                      onInput={e => this.handlePasswordChange(e)}\n                      required\n                    />\n                    <button\n                      type=\"button\"\n                      class=\"password-toggle-btn\"\n                      onClick={() => this.togglePasswordVisibility()}\n                      aria-label={this.showPassword ? 'Ocultar senha' : 'Mostrar senha'}\n                    >\n                      <img\n                        src={getAssetPath(\n                          this.showPassword\n                            ? './assets/icons/eye-off.svg'\n                            : './assets/icons/eye.svg',\n                        )}\n                        alt={this.showPassword ? 'Ocultar senha' : 'Mostrar senha'}\n                      />\n                    </button>\n                  </div>\n\n                  <button\n                    class=\"launch-mode-form-content-button\"\n                    type=\"submit\"\n                    disabled={this.isLoading || !this.passwordInput.trim()}\n                  >\n                    {this.isLoading ? 'Destravando...' : 'Destravar'}\n                  </button>\n                </div>\n              </form>\n\n              {this.userMessage && (\n                <div class={`launch-mode-content-message launch-mode-content-message-error`}>\n                  <span>{this.userMessage.text}</span>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}